openapi: 3.0.3
info:
  title: Simple User CRUD API
  description: A simple CRUD API for managing users.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      description: Create a new user with the specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieve a user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID.
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

    put:
      summary: Update a user
      description: Update an existing user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

    delete:
      summary: Delete a user
      description: Delete a user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID.
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        dateOfBirth:
          type: string
          format: date
          description: The date of birth of the user.
        name:
          type: string
          description: The name of the user.
        gender:
          type: string
          enum: [male, female, other]
          description: The gender of the user.

    UserInput:
      type: object
      required:
        - username
        - email
        - dateOfBirth
        - name
        - gender
      properties:
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        dateOfBirth:
          type: string
          format: date
          description: The date of birth of the user.
        name:
          type: string
          description: The name of the user.
        gender:
          type: string
          enum: [male, female, other]
          description: The gender of the user.
